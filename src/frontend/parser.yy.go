// Code generated by goyacc -o frontend/parser.yy.go frontend/parser-typed.y. DO NOT EDIT.

//line frontend/parser-typed.y:2

// Definitions and imports.
// Define imports for section three (Inserted go code) below.
package frontend

import __yyfmt__ "fmt"

//line frontend/parser-typed.y:5

import "vslc/src/ir"

//line frontend/parser-typed.y:21
type yySymType struct {
	yys  int
	typ  int
	val  string
	line int
	pos  int
	data interface{}
	node *ir.Node
}

const LSHIFT = 57346
const RSHIFT = 57347
const UMINUS = 57348
const THEN = 57349
const ELSE = 57350
const DEF = 57351
const BEGIN = 57352
const END = 57353
const RETURN = 57354
const PRINT = 57355
const IF = 57356
const WHILE = 57357
const DO = 57358
const CONTINUE = 57359
const VAR = 57360
const INTEGER = 57361
const FLOAT = 57362
const IDENTIFIER = 57363
const STRING = 57364
const ASSIGN = 57365
const TYPE = 57366

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'|'",
	"'^'",
	"'&'",
	"LSHIFT",
	"RSHIFT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"UMINUS",
	"THEN",
	"ELSE",
	"'~'",
	"DEF",
	"BEGIN",
	"END",
	"RETURN",
	"PRINT",
	"IF",
	"WHILE",
	"DO",
	"CONTINUE",
	"VAR",
	"INTEGER",
	"FLOAT",
	"IDENTIFIER",
	"STRING",
	"ASSIGN",
	"TYPE",
	"','",
	"'('",
	"')'",
	"'='",
	"'<'",
	"'>'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line frontend/parser-typed.y:132

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 207

var yyAct = [...]int{
	52, 51, 5, 59, 67, 68, 69, 70, 71, 63,
	64, 65, 66, 55, 21, 47, 22, 106, 75, 16,
	14, 107, 9, 12, 13, 61, 76, 16, 41, 12,
	20, 10, 81, 18, 15, 95, 42, 12, 56, 56,
	6, 34, 62, 60, 72, 73, 74, 108, 77, 7,
	3, 26, 57, 8, 23, 24, 34, 25, 65, 66,
	53, 82, 83, 46, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 33, 34, 34, 98, 43, 99, 101,
	102, 103, 32, 44, 31, 84, 69, 70, 71, 63,
	64, 65, 66, 34, 48, 49, 10, 34, 19, 34,
	30, 45, 29, 100, 28, 27, 11, 104, 109, 84,
	67, 68, 69, 70, 71, 63, 64, 65, 66, 58,
	17, 43, 96, 97, 34, 50, 40, 44, 35, 36,
	37, 38, 4, 39, 110, 2, 1, 10, 48, 49,
	10, 54, 78, 79, 80, 45, 40, 105, 35, 36,
	37, 38, 0, 39, 0, 0, 0, 10, 40, 85,
	35, 36, 37, 38, 0, 39, 0, 0, 40, 10,
	35, 36, 37, 38, 0, 39, 7, 0, 0, 10,
	67, 68, 69, 70, 71, 63, 64, 65, 66, 68,
	69, 70, 71, 63, 64, 65, 66, 70, 71, 63,
	64, 65, 66, 63, 64, 65, 66,
}

var yyPact = [...]int{
	23, -1000, 23, -1000, -1000, -1000, 2, 2, -1000, -10,
	-1000, -13, -1000, 2, 2, -1000, -1000, -19, -1000, -13,
	-1000, 2, -5, -1000, -1000, 108, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -3, 67, 111, 67, 67, -1000,
	150, 67, 176, 67, 67, 67, -1000, -16, -1000, -1000,
	-7, -1000, 176, -1000, -1000, 34, 106, 8, 150, 140,
	-1000, -1000, 176, 67, 67, 67, 67, 67, 67, 67,
	67, 67, -1000, -1000, 0, 67, 111, 108, 67, 67,
	67, 108, -1000, 128, -1000, -1000, 47, 47, -1000, -1000,
	184, 80, 190, 194, 194, -1000, -18, -12, 176, -1000,
	32, 176, 176, 176, -1000, -1000, -1000, 67, 108, 176,
	-1000,
}

var yyPgo = [...]int{
	0, 136, 135, 50, 132, 2, 3, 25, 125, 1,
	123, 0, 33, 98, 34, 15, 122, 120, 119, 105,
	104, 102, 100, 84, 82, 73, 13, 63, 60,
}

var yyR1 = [...]int{
	0, 1, 2, 2, 3, 3, 6, 6, 8, 8,
	10, 10, 12, 13, 13, 16, 16, 17, 17, 17,
	18, 18, 4, 7, 7, 7, 7, 7, 7, 7,
	25, 25, 19, 20, 21, 24, 22, 22, 23, 26,
	26, 26, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 5, 9, 9,
	15, 27, 27, 28, 14,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 1, 1, 1, 2, 1, 3,
	1, 3, 2, 1, 3, 1, 0, 1, 3, 0,
	1, 2, 7, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 3, 2, 2, 1, 4, 6, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 1, 1, 4, 3, 1, 1,
	1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -1, -2, -3, -4, -5, 17, 26, -3, -15,
	29, -13, -15, 34, 33, -14, 32, -17, -12, -13,
	-15, 33, 35, -14, -12, -14, -7, -19, -20, -21,
	-22, -23, -24, -25, -15, 20, 21, 22, 23, 25,
	18, 31, -11, 10, 16, 34, -27, -15, 27, 28,
	-8, -9, -11, -28, 30, -26, -11, -26, -18, -6,
	-5, -7, -11, 9, 10, 11, 12, 4, 5, 6,
	7, 8, -11, -11, -11, 34, 33, 14, 36, 37,
	38, 24, -5, -6, -7, 19, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, 35, -16, -10, -11, -9,
	-7, -11, -11, -11, -7, 19, 35, 33, 15, -11,
	-7,
}

var yyDef = [...]int{
	0, -2, 1, 2, 4, 5, 0, 0, 3, 0,
	60, 0, 13, 19, 0, 57, 64, 0, 17, 0,
	14, 0, 0, 12, 18, 0, 22, 23, 24, 25,
	26, 27, 28, 29, 0, 0, 0, 0, 0, 35,
	0, 0, 33, 0, 0, 0, 54, 55, 61, 62,
	34, 8, 58, 59, 63, 0, 0, 0, 0, 0,
	20, 6, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 51, 52, 0, 16, 0, 0, 0, 0,
	0, 0, 21, 0, 7, 31, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 53, 0, 15, 10, 9,
	36, 39, 40, 41, 38, 30, 56, 0, 0, 11,
	37,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 6, 3,
	34, 35, 11, 9, 33, 10, 3, 12, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	37, 36, 38, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 16,
}

var yyTok2 = [...]int{
	2, 3, 7, 8, 13, 14, 15, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:40
		{
			ir.Root = nodeInit(ir.PROGRAM, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1]).node
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:42
		{
			yyVAL = nodeInit(ir.GLOBAL_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:43
		{
			yyVAL = nodeInit(ir.GLOBAL_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[2])
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:45
		{
			yyVAL = nodeInit(ir.GLOBAL, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:46
		{
			yyVAL = nodeInit(ir.GLOBAL, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:48
		{
			yyVAL = nodeInit(ir.STATEMENT_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 7:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:49
		{
			yyVAL = nodeInit(ir.STATEMENT_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[2])
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:51
		{
			yyVAL = nodeInit(ir.PRINT_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:52
		{
			yyVAL = nodeInit(ir.PRINT_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:54
		{
			yyVAL = nodeInit(ir.EXPRESSION_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:55
		{
			yyVAL = nodeInit(ir.EXPRESSION_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:57
		{
			yyVAL = nodeInit(ir.TYPED_VARIABLE_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2], yyDollar[1])
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:59
		{
			yyVAL = nodeInit(ir.VARIABLE_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:60
		{
			yyVAL = nodeInit(ir.VARIABLE_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:62
		{
			yyVAL = nodeInit(ir.ARGUMENT_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 16:
		yyDollar = yyS[yypt-0 : yypt+1]
//line frontend/parser-typed.y:63
		{
			yyVAL = nodeInit(ir.PARAMETER_LIST, nil, 0, 0)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:65
		{
			yyVAL = nodeInit(ir.PARAMETER_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:66
		{
			yyVAL = nodeInit(ir.PARAMETER_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
//line frontend/parser-typed.y:67
		{
			yyVAL = nodeInit(ir.PARAMETER_LIST, nil, 0, 0)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:69
		{
			yyVAL = nodeInit(ir.DECLARATION_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:70
		{
			yyVAL = nodeInit(ir.DECLARATION_LIST, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[2])
		}
	case 22:
		yyDollar = yyS[yypt-7 : yypt+1]
//line frontend/parser-typed.y:72
		{
			yyVAL = nodeInit(ir.FUNCTION, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2], yyDollar[6], yyDollar[4], yyDollar[7])
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:74
		{
			yyVAL = nodeInit(ir.STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:75
		{
			yyVAL = nodeInit(ir.STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:76
		{
			yyVAL = nodeInit(ir.STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:77
		{
			yyVAL = nodeInit(ir.STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:78
		{
			yyVAL = nodeInit(ir.STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:79
		{
			yyVAL = nodeInit(ir.STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:80
		{
			yyVAL = nodeInit(ir.STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line frontend/parser-typed.y:82
		{
			yyVAL = nodeInit(ir.BLOCK, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2], yyDollar[3])
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:83
		{
			yyVAL = nodeInit(ir.BLOCK, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2])
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:85
		{
			yyVAL = nodeInit(ir.ASSIGNMENT_STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:87
		{
			yyVAL = nodeInit(ir.RETURN_STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2])
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:89
		{
			yyVAL = nodeInit(ir.PRINT_STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2])
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:91
		{
			yyVAL = nodeInit(ir.NULL_STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line frontend/parser-typed.y:93
		{
			yyVAL = nodeInit(ir.IF_STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2], yyDollar[4])
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line frontend/parser-typed.y:94
		{
			yyVAL = nodeInit(ir.IF_STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2], yyDollar[4], yyDollar[6])
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line frontend/parser-typed.y:96
		{
			yyVAL = nodeInit(ir.WHILE_STATEMENT, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[2], yyDollar[4])
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:98
		{
			yyVAL = nodeInit(ir.RELATION, "=", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:99
		{
			yyVAL = nodeInit(ir.RELATION, "<", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:100
		{
			yyVAL = nodeInit(ir.RELATION, ">", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:102
		{
			yyVAL = nodeInit(ir.EXPRESSION, "+", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:103
		{
			yyVAL = nodeInit(ir.EXPRESSION, "-", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:104
		{
			yyVAL = nodeInit(ir.EXPRESSION, "*", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:105
		{
			yyVAL = nodeInit(ir.EXPRESSION, "/", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:106
		{
			yyVAL = nodeInit(ir.EXPRESSION, "|", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:107
		{
			yyVAL = nodeInit(ir.EXPRESSION, "^", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:108
		{
			yyVAL = nodeInit(ir.EXPRESSION, "&", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:109
		{
			yyVAL = nodeInit(ir.EXPRESSION, "<<", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:110
		{
			yyVAL = nodeInit(ir.EXPRESSION, ">>", yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:111
		{
			yyVAL = nodeInit(ir.EXPRESSION, "-", yyDollar[1].line, yyDollar[1].pos, yyDollar[2])
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line frontend/parser-typed.y:112
		{
			yyVAL = nodeInit(ir.EXPRESSION, "~", yyDollar[1].line, yyDollar[1].pos, yyDollar[2])
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:113
		{
			yyVAL = nodeInit(ir.EXPRESSION, nil, yyDollar[2].line, yyDollar[2].pos, yyDollar[2])
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:114
		{
			yyVAL = nodeInit(ir.EXPRESSION, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:115
		{
			yyVAL = nodeInit(ir.EXPRESSION, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line frontend/parser-typed.y:116
		{
			yyVAL = nodeInit(ir.EXPRESSION, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1], yyDollar[3])
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line frontend/parser-typed.y:118
		{
			yyVAL = nodeInit(ir.DECLARATION, nil, yyDollar[2].line, yyDollar[2].pos, yyDollar[3], yyDollar[2])
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:120
		{
			yyVAL = nodeInit(ir.PRINT_ITEM, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:121
		{
			yyVAL = nodeInit(ir.PRINT_ITEM, nil, yyDollar[1].line, yyDollar[1].pos, yyDollar[1])
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:123
		{
			yyVAL = nodeInit(ir.IDENTIFIER_DATA, yyDollar[1].val, yyDollar[1].line, yyDollar[1].pos)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:125
		{
			yyVAL = nodeInit(ir.INTEGER_DATA, yyDollar[1].val, yyDollar[1].line, yyDollar[1].pos)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:126
		{
			yyVAL = nodeInit(ir.FLOAT_DATA, yyDollar[1].val, yyDollar[1].line, yyDollar[1].pos)
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:128
		{
			yyVAL = nodeInit(ir.STRING_DATA, yyDollar[1].val, yyDollar[1].line, yyDollar[1].pos)
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line frontend/parser-typed.y:130
		{
			yyVAL = nodeInit(ir.TYPE_DATA, yyDollar[1].val, yyDollar[1].line, yyDollar[1].pos)
		}
	}
	goto yystack /* stack new state and value */
}
